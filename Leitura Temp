#include "stm32f1xx_hal.h"
#include "stdio.h"
#include "string.h"

// Definições de hardware
#define LM75A_ADDR       (0x90) // Endereço do sensor LM75A (0x90 para escrita, 0x91 para leitura)
#define EEPROM_ADDR      (0xA0)  // Endereço da EEPROM 24LC256
#define BUFFER_SIZE      256     // Tamanho do buffer circular
#define SEQUENCE_SIZE    2       // Tamanho do número de sequência (2 bytes)
#define TEMP_SIZE        1       // Tamanho da temperatura (1 byte)

// Endereços fixos na EEPROM para armazenar índice de escrita e número de sequência
#define EEPROM_INDEX_ADDR         0xFF00

// Definições de pinos
#define SEGMENT_PORT        GPIOA
#define BUTTON1_PORT        GPIOA
#define BUTTON1_PIN         GPIO_PIN_15
#define BUTTON2_PORT        GPIOA
#define BUTTON2_PIN         GPIO_PIN_14

#define ERROR_LED_PORT      GPIOC
#define ERROR_LED_PIN       GPIO_PIN_13

// Variáveis globais
uint16_t write_index = 0;         // Índice atual para escrita no buffer circular
uint16_t sequence_number = 0;     // Número sequencial de leituras

I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;

// Protótipos
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_USART1_UART_Init(void);
void MX_I2C1_Init(void);
void display_number(uint16_t number);
HAL_StatusTypeDef read_temperature(uint8_t* temp_data);
HAL_StatusTypeDef eeprom_write(uint16_t address, uint8_t* data, uint16_t size);
HAL_StatusTypeDef eeprom_read(uint16_t address, uint8_t* data, uint16_t size);
void send_data_uart(uint8_t* data, uint16_t size);
void save_persistent_data(void);
void load_persistent_data(void);
void reset_buffer(void);
void display_history(void);
void Error_Handler(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    MX_I2C1_Init();

    uint8_t temp_data[TEMP_SIZE];
    uint8_t data[SEQUENCE_SIZE + TEMP_SIZE];

    load_persistent_data();

    while (1)
    {
        if (read_temperature(temp_data) != HAL_OK)
        {
            Error_Handler();
        }

        data[0] = (uint8_t)(sequence_number >> 8);
        data[1] = (uint8_t)(sequence_number & 0xFF);
        data[2] = temp_data[0];

        if (eeprom_write(write_index * (SEQUENCE_SIZE + TEMP_SIZE), data, SEQUENCE_SIZE + TEMP_SIZE) != HAL_OK)
        {
            Error_Handler();
        }

        write_index = (write_index + 1) % BUFFER_SIZE;
        sequence_number++;

        save_persistent_data();

        send_data_uart(data, SEQUENCE_SIZE + TEMP_SIZE);

        display_number(temp_data[0]);

        HAL_Delay(1000);
    }
}

void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
    {
        Error_Handler();
    }
}

void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOC_CLK_ENABLE();

    GPIO_InitStruct.Pin = BUTTON1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BUTTON1_PORT, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = BUTTON2_PIN;
    HAL_GPIO_Init(BUTTON2_PORT, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = 0x00FF; 
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(SEGMENT_PORT, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = ERROR_LED_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(ERROR_LED_PORT, &GPIO_InitStruct);

    HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_SET);

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void MX_USART1_UART_Init(void)
{
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 9600;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK)
    {
        Error_Handler();
    }
}

void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

void display_number(uint16_t number)
{
    const uint8_t segment_map[10] = {
        0x3F,
        0x06,
        0x5B,
        0x4F,
        0x66,
        0x6D,
        0x7D,
        0x07,
        0x7F,
        0x6F
    };

    uint8_t tens = (number / 10) % 10;
    uint8_t units = number % 10;

    HAL_GPIO_WritePin(SEGMENT_PORT, 0x00FF, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(SEGMENT_PORT, segment_map[tens], GPIO_PIN_SET);
    HAL_Delay(5);

    HAL_GPIO_WritePin(SEGMENT_PORT, 0x00FF, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(SEGMENT_PORT, segment_map[units], GPIO_PIN_SET);
    HAL_Delay(5);
}

HAL_StatusTypeDef read_temperature(uint8_t* temp_data)
{
    uint8_t temp_raw[2] = {0};
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, LM75A_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, temp_raw, 2, 100);
    if (status != HAL_OK)
        return status;

    *temp_data = temp_raw[0];
    return HAL_OK;
}

HAL_StatusTypeDef eeprom_write(uint16_t address, uint8_t* data, uint16_t size)
{
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, data, size, 100);
    HAL_Delay(5);
    return status;
}

HAL_StatusTypeDef eeprom_read(uint16_t address, uint8_t* data, uint16_t size)
{
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, data, size, 100);
    return status;
}

void send_data_uart(uint8_t* data, uint16_t size)
{
    char buffer[64];
    uint16_t seq = (data[0] << 8) | data[1];
    uint8_t temp = data[2];
    int len = snprintf(buffer, sizeof(buffer), "Amostra %05u: %d °C\r\n", seq, temp);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 100);
}

void save_persistent_data(void)
{
    uint8_t data[4];
    data[0] = (uint8_t)(write_index >> 8);
    data[1] = (uint8_t)(write_index & 0xFF);
    data[2] = (uint8_t)(sequence_number >> 8);
    data[3] = (uint8_t)(sequence_number & 0xFF);
    eeprom_write(EEPROM_INDEX_ADDR, data, 4);
}

void load_persistent_data(void)
{
    uint8_t data[4] = {0};
    if (eeprom_read(EEPROM_INDEX_ADDR, data, 4) == HAL_OK)
    {
        write_index = ((uint16_t)data[0] << 8) | data[1];
        sequence_number = ((uint16_t)data[2] << 8) | data[3];
        if (write_index >= BUFFER_SIZE)
            write_index = 0;
    }
    else
    {
        write_index = 0;
        sequence_number = 0;
    }
}

void reset_buffer(void)
{
    uint8_t empty_data[SEQUENCE_SIZE + TEMP_SIZE] = {0};
    for(uint16_t i=0; i<BUFFER_SIZE; i++)
    {
        if (eeprom_write(i * (SEQUENCE_SIZE + TEMP_SIZE), empty_data, SEQUENCE_SIZE + TEMP_SIZE) != HAL_OK)
        {
            Error_Handler();
        }
    }
    write_index = 0;
    sequence_number = 0;
    save_persistent_data();

    char msg[] = "Buffer reiniciado\r\n";
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), 100);
}

void display_history(void)
{
    char buffer[64];
    uint8_t data[SEQUENCE_SIZE + TEMP_SIZE];
    char header[] = "Historico:\r\n";

    HAL_UART_Transmit(&huart1,(uint8_t*)header, strlen(header),100);

    for(uint16_t i=0; i<BUFFER_SIZE; i++)
    {
        if(eeprom_read(i * (SEQUENCE_SIZE + TEMP_SIZE), data, SEQUENCE_SIZE + TEMP_SIZE) != HAL_OK)
        {
            Error_Handler();
            return;
        }

        uint16_t seq = ((uint16_t)data[0] << 8) | data[1];
        uint8_t temp = data[2];

        if(seq == 0 && temp == 0)
            continue;

        int len = snprintf(buffer, sizeof(buffer), "%05u: %d °C\r\n", seq, temp);
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 100);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if(GPIO_Pin == BUTTON1_PIN)
    {
        display_history();
    }
    else if(GPIO_Pin == BUTTON2_PIN)
    {
        reset_buffer();
    }
}

void Error_Handler(void)
{
    while(1)
    {
        HAL_GPIO_TogglePin(ERROR_LED_PORT, ERROR_LED_PIN);
        HAL_Delay(500);
    }
}

void EXTI15_10_IRQHandler(void)
{
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_PIN);
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_PIN);
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif
