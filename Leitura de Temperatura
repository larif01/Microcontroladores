#include "stm32f1xx_hal.h"
#include "stdio.h"

// Definições de hardware
#define LM75A_ADDR 0x90
#define EEPROM_ADDR 0xA0
#define BUFFER_SIZE 256
#define PAGE_SIZE 64
#define SEQUENCE_SIZE 2
#define TEMP_SIZE 1

// Definições de pinos
#define SEGMENT_PORT GPIOA
#define BUTTON1_PORT GPIOA
#define BUTTON1_PIN GPIO_PIN_15
#define BUTTON2_PORT GPIOA
#define BUTTON2_PIN GPIO_PIN_14
#define USART_PORT GPIOA
#define USART_TX_PIN GPIO_PIN_9
#define USART_RX_PIN GPIO_PIN_10

#define ERROR_LED_PORT GPIOC
#define ERROR_LED_PIN GPIO_PIN_13

// Variáveis globais
uint16_t write_index = 0;
uint16_t sequence_number = 0;
uint8_t buffer[BUFFER_SIZE][SEQUENCE_SIZE + TEMP_SIZE];
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart1;

// Protótipos de funções
void SystemClock_Config(void);
void MX_GPIO_Init(void);
void MX_USART1_UART_Init(void);
void MX_I2C1_Init(void);
void display_number(uint16_t number);
void read_temperature(uint8_t* temp_data);
void write_to_eeprom(uint16_t address, uint8_t* data, uint16_t size);
void read_from_eeprom(uint16_t address, uint8_t* data, uint16_t size);
void send_data_uart(uint8_t* data, uint16_t size);
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
void reset_buffer(void);
void display_history(void);
void Error_Handler(void);

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();
    MX_I2C1_Init();

    uint8_t temp_data[TEMP_SIZE];

    // Inicializa o buffer com dados persistentes
    read_from_eeprom(0, (uint8_t*)buffer, BUFFER_SIZE * (SEQUENCE_SIZE + TEMP_SIZE));

    while (1)
    {
        // Leitura da temperatura
        read_temperature(temp_data);

        // Prepara os dados para escrita
        uint8_t data[SEQUENCE_SIZE + TEMP_SIZE];
        data[0] = (uint8_t)((sequence_number >> 8) & 0xFF); // Número de sequência (MSB)
        data[1] = (uint8_t)(sequence_number & 0xFF);        // Número de sequência (LSB)
        data[2] = temp_data[0];                              // Temperatura

        // Escreve os dados no buffer
        for (uint16_t i = 0; i < SEQUENCE_SIZE + TEMP_SIZE; i++)
        {
            buffer[write_index][i] = data[i];
        }

        // Escreve os dados na EEPROM
        write_to_eeprom(write_index * (SEQUENCE_SIZE + TEMP_SIZE), data, SEQUENCE_SIZE + TEMP_SIZE);

        // Atualiza o índice de escrita e o número de sequência
        write_index = (write_index + 1) % BUFFER_SIZE;
        sequence_number++;

        // Envia os dados via UART
        send_data_uart(data, SEQUENCE_SIZE + TEMP_SIZE);

        // Exibe a temperatura no display de 7 segmentos
        display_number(temp_data[0]);

        HAL_Delay(1000);
    }
}

void SystemClock_Config(void)
{
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
    {
        Error_Handler();
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
    {
        Error_Handler();
    }
}

void MX_GPIO_Init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Configuração do pino do botão 1
    GPIO_InitStruct.Pin = BUTTON1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BUTTON1_PORT, &GPIO_InitStruct);

    // Configuração do pino do botão 2
    GPIO_InitStruct.Pin = BUTTON2_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(BUTTON2_PORT, &GPIO_InitStruct);

    // Configuração do pino de saída para o display de 7 segmentos
    GPIO_InitStruct.Pin = GPIO_PIN_All;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(SEGMENT_PORT, &GPIO_InitStruct);

    // Configuração do LED de erro
    HAL_GPIO_WritePin(ERROR_LED_PORT, ERROR_LED_PIN, GPIO_PIN_SET);
}

void MX_USART1_UART_Init(void)
{
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 9600;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    if (HAL_UART_Init(&huart1) != HAL_OK)
    {
        Error_Handler();
    }
}

void MX_I2C1_Init(void)
{
    hi2c1.Instance = I2C1;
    hi2c1.Init.ClockSpeed = 100000;
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
    hi2c1.Init.OwnAddress1 = 0;
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
    hi2c1.Init.OwnAddress2 = 0;
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
    {
        Error_Handler();
    }
}

void display_number(uint16_t number)
{
    // Função para exibir o número no display de 7 segmentos
    // Implementação específica do hardware
}

void read_temperature(uint8_t* temp_data)
{
    // Função para ler a temperatura do sensor LM75A via I2C
    uint8_t temp_raw[2];
    HAL_I2C_Mem_Read(&hi2c1, LM75A_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, temp_raw, 2, HAL_MAX_DELAY);
    
    // Parte inteira da temperatura está no primeiro byte
    *temp_data = temp_raw[0];
}

void write_to_eeprom(uint16_t address, uint8_t* data, uint16_t size)
{
    HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
    HAL_Delay(5); // Tempo necessário para escrita interna da EEPROM
}

void read_from_eeprom(uint16_t address, uint8_t* data, uint16_t size)
{
    HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, address, I2C_MEMADD_SIZE_16BIT, data, size, HAL_MAX_DELAY);
}

void send_data_uart(uint8_t* data, uint16_t size)
{
    char buffer[50];
    uint16_t seq = (data[0] << 8) | data[1];
    snprintf(buffer, sizeof(buffer), "Amostra %05u: %d °C\r\n", seq, data[2]);
    HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    if (GPIO_Pin == BUTTON1_PIN)
    {
        // Botão 1 pressionado: exibe todo o histórico salvo na EEPROM via UART
        display_history();
    }
    else if (GPIO_Pin == BUTTON2_PIN)
    {
        // Botão 2 pressionado: reinicia o buffer
        reset_buffer();
    }
}

void reset_buffer(void)
{
    // Reseta o índice de escrita e o número de sequência
    write_index = 0;
    sequence_number = 0;
    uint8_t empty_data[SEQUENCE_SIZE + TEMP_SIZE] = {0};
    for (uint16_t i = 0; i < BUFFER_SIZE; i++)
    {
        write_to_eeprom(i * (SEQUENCE_SIZE + TEMP_SIZE), empty_data, SEQUENCE_SIZE + TEMP_SIZE);
    }
}

void display_history(void)
{
    char buffer[50];
    uint8_t data[SEQUENCE_SIZE + TEMP_SIZE];
    HAL_UART_Transmit(&huart1, (uint8_t*)"Historico:\r\n", 12, HAL_MAX_DELAY);

    for (uint16_t i = 0; i < BUFFER_SIZE; i++)
    {
        read_from_eeprom(i * (SEQUENCE_SIZE + TEMP_SIZE), data, SEQUENCE_SIZE + TEMP_SIZE);
        uint16_t seq = (data[0] << 8) | data[1];
        snprintf(buffer, sizeof(buffer), "%05u: %d °C\r\n", seq, data[2]);
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    }
}

// Handler de erro simples
void Error_Handler(void)
{
    while (1)
    {
        HAL_GPIO_TogglePin(ERROR_LED_PORT, ERROR_LED_PIN); // Inverte o estado do LED
        HAL_Delay(500); // Pisca a cada 500 ms
    }
}
